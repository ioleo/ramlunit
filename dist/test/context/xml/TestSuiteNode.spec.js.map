{"version":3,"file":"TestSuiteNode.spec.js","sourceRoot":"","sources":["../../../../test/context/xml/TestSuiteNode.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai'\nimport {Time} from '../../../src/context/time/Time'\nimport {FailureNode} from '../../../src/context/xml/FailureNode'\nimport {TestCaseNode} from '../../../src/context/xml/TestCaseNode'\nimport {TestSuiteNode} from '../../../src/context/xml/TestSuiteNode'\n\ndescribe('TestSuiteNode', () => {\n\n    const stopwatch = new Time()\n    const elapsed = new Time(stopwatch)\n\n    const failure1 = new FailureNode('aaa1', 'bbb1', 'ccc1')\n    const failure2 = new FailureNode('aaa2', 'bbb2', 'ccc2')\n    const failingCase = new TestCaseNode('failing_case', [failure1, failure2])\n\n    const passingCase1 = new TestCaseNode('passing_case_1', [])\n    const passingCase2 = new TestCaseNode('passing_case_2', [])\n\n    const passingSuite = new TestSuiteNode('passing_suite', elapsed, [passingCase1, passingCase2])\n    const failingSuite = new TestSuiteNode('failing_suite', elapsed, [passingCase1, failingCase])\n    const emptySuite = new TestSuiteNode('empty_suite', elapsed, [])\n\n    it('empty suite should not have failures', () => {\n        assert.strictEqual(emptySuite.countFailures(), 0)\n        assert.strictEqual(emptySuite.hasFailures(), false)\n    })\n\n    it('passing suite should not have failures', () => {\n        assert.strictEqual(passingSuite.countFailures(), 0)\n        assert.strictEqual(passingSuite.hasFailures(), false)\n    })\n\n    it('failing suite should have failures', () => {\n        assert.strictEqual(failingSuite.countFailures(), 2)\n        assert.strictEqual(failingSuite.hasFailures(), true)\n    })\n\n    it('empty suite should be convertable to json', () => {\n        assert.deepEqual(emptySuite.toJson(), {\n            testsuite: [\n                { _attr: { name: 'empty_suite', time: elapsed.toString(), failures: 0 }},\n                { testcases: [] },\n            ],\n        })\n    })\n\n    it('passing suite should be convertable to json', () => {\n        assert.deepEqual(passingSuite.toJson(), {\n            testsuite: [\n                { _attr: { name: 'passing_suite', time: elapsed.toString(), failures: 0 }},\n                { testcases: [\n                    passingCase1.toJson(),\n                    passingCase2.toJson(),\n                ]},\n            ],\n        })\n    })\n\n    it('failing suite should be convertable to json', () => {\n        assert.deepEqual(failingSuite.toJson(), {\n            testsuite: [\n                { _attr: { name: 'failing_suite', time: elapsed.toString(), failures: 2 }},\n                { testcases: [\n                    passingCase1.toJson(),\n                    failingCase.toJson(),\n                ]},\n            ],\n        })\n    })\n})\n"]}