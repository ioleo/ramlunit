{"version":3,"file":"TestCaseNode.spec.js","sourceRoot":"","sources":["../../../../test/context/xml/TestCaseNode.spec.ts"],"names":[],"mappings":";;AAAA,6BAA2B;AAC3B,oEAAgE;AAChE,sEAAkE;AAElE,QAAQ,CAAC,cAAc,EAAE;IAErB,IAAM,QAAQ,GAAG,IAAI,yBAAW,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;IAC3D,IAAM,QAAQ,GAAG,IAAI,yBAAW,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;IAC3D,IAAM,WAAW,GAAG,IAAI,2BAAY,CAAC,cAAc,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAA;IAC1E,IAAM,WAAW,GAAG,IAAI,2BAAY,CAAC,cAAc,EAAE,EAAE,CAAC,CAAA;IAExD,EAAE,CAAC,uCAAuC,EAAE;QACxC,aAAM,CAAC,WAAW,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAA;QAClD,aAAM,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,CAAA;IACxD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,mCAAmC,EAAE;QACpC,aAAM,CAAC,WAAW,CAAC,WAAW,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAA;QAClD,aAAM,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAA;IACvD,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,4CAA4C,EAAE;QAC7C,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE;YACnC,QAAQ,EAAE;gBACN,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAC;aAClD;SACJ,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,4CAA4C,EAAE;QAC7C,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE;YACnC,QAAQ,EAAE;gBACN,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAC;gBAC/C,QAAQ,CAAC,MAAM,EAAE;gBACjB,QAAQ,CAAC,MAAM,EAAE;aACpB;SACJ,CAAC,CAAA;IACN,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import {assert} from 'chai'\nimport {FailureNode} from '../../../src/context/xml/FailureNode'\nimport {TestCaseNode} from '../../../src/context/xml/TestCaseNode'\n\ndescribe('TestCaseNode', () => {\n\n    const failure1 = new FailureNode('failure_1', 'foo', 'bar')\n    const failure2 = new FailureNode('failute_2', 'foo', 'bar')\n    const failingCase = new TestCaseNode('failing_case', [failure1, failure2])\n    const passingCase = new TestCaseNode('passing_case', [])\n\n    it('passing case should not have failures', () => {\n        assert.strictEqual(passingCase.countFailures(), 0)\n        assert.strictEqual(passingCase.hasFailures(), false)\n    })\n\n    it('failing case should have failures', () => {\n        assert.strictEqual(failingCase.countFailures(), 2)\n        assert.strictEqual(failingCase.hasFailures(), true)\n    })\n\n    it('passing case should be convertable to json', () => {\n        assert.deepEqual(passingCase.toJson(), {\n            testcase: [\n                { _attr: { name: 'passing_case', failures: 0 }},\n            ],\n        })\n    })\n\n    it('failing case should be convertable to json', () => {\n        assert.deepEqual(failingCase.toJson(), {\n            testcase: [\n                { _attr: { name: 'failing_case', failures: 2 }},\n                failure1.toJson(),\n                failure2.toJson(),\n            ],\n        })\n    })\n})\n"]}