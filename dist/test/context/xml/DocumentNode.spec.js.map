{"version":3,"file":"DocumentNode.spec.js","sourceRoot":"","sources":["../../../../test/context/xml/DocumentNode.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai'\nimport {Time} from '../../../src/context/time/Time'\nimport {DocumentNode} from '../../../src/context/xml/DocumentNode'\nimport {FailureNode} from '../../../src/context/xml/FailureNode'\nimport {TestCaseNode} from '../../../src/context/xml/TestCaseNode'\nimport {TestSuiteNode} from '../../../src/context/xml/TestSuiteNode'\n\ndescribe('DocumentNode', () => {\n\n    const stopwatch = new Time()\n    const elapsed = new Time(stopwatch)\n\n    const failure1 = new FailureNode('aaa1', 'bbb1', 'ccc1')\n    const failure2 = new FailureNode('aaa2', 'bbb2', 'ccc2')\n    const failingCase = new TestCaseNode('failing_case', [failure1, failure2])\n\n    const passingCase1 = new TestCaseNode('passing_case_1', [])\n    const passingCase2 = new TestCaseNode('passing_case_2', [])\n\n    const passingSuite = new TestSuiteNode('passing_suite', elapsed, [passingCase1, passingCase2])\n    const failingSuite = new TestSuiteNode('failing_suite', elapsed, [passingCase1, failingCase])\n\n    const failingDocument = new DocumentNode([failingSuite])\n    const passingDocument = new DocumentNode([passingSuite])\n    const emptyDocument = new DocumentNode([])\n\n    it('empty document should not have failures', () => {\n        assert.strictEqual(emptyDocument.countFailures(), 0)\n        assert.strictEqual(emptyDocument.hasFailures(), false)\n    })\n\n    it('passing document should not have failures', () => {\n        assert.strictEqual(passingDocument.countFailures(), 0)\n        assert.strictEqual(passingDocument.hasFailures(), false)\n    })\n\n    it('failing document should have failures', () => {\n        assert.strictEqual(failingDocument.countFailures(), 2)\n        assert.strictEqual(failingDocument.hasFailures(), true)\n    })\n\n    it('empty document added passing suite should not have failures', () => {\n        const addedPassing = emptyDocument.addTestSuite(passingSuite)\n        assert.strictEqual(addedPassing.countFailures(), 0)\n        assert.strictEqual(addedPassing.hasFailures(), false)\n    })\n\n    it('empty document added failing suite should have failures', () => {\n        const addedFailing = emptyDocument.addTestSuite(failingSuite)\n        assert.strictEqual(addedFailing.countFailures(), 2)\n        assert.strictEqual(addedFailing.hasFailures(), true)\n    })\n\n    it('passing document added passing suite should not have failures', () => {\n        const addedPassing = passingDocument.addTestSuite(passingSuite)\n        assert.strictEqual(addedPassing.countFailures(), 0)\n        assert.strictEqual(addedPassing.hasFailures(), false)\n    })\n\n    it('passing document added failing suite should have failures', () => {\n        const addedFailing = passingDocument.addTestSuite(failingSuite)\n        assert.strictEqual(addedFailing.countFailures(), 2)\n        assert.strictEqual(addedFailing.hasFailures(), true)\n    })\n\n    it('failing document added passing suite should have failures', () => {\n        const addedPassing = failingDocument.addTestSuite(passingSuite)\n        assert.strictEqual(addedPassing.countFailures(), 2)\n        assert.strictEqual(addedPassing.hasFailures(), true)\n    })\n\n    it('failing document added failing suite should have failures', () => {\n        const addedFailing = failingDocument.addTestSuite(failingSuite)\n        assert.strictEqual(addedFailing.countFailures(), 4)\n        assert.strictEqual(addedFailing.hasFailures(), true)\n    })\n\n})\n"]}