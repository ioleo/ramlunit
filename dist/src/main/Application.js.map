{"version":3,"file":"Application.js","sourceRoot":"","sources":["../../../src/main/Application.ts"],"names":[],"mappings":";;AAAA,+BAAkC;AAClC,6BAA+B;AAC/B,2BAA6B;AAC7B,6EAAyE;AACzE,4DAAwD;AAExD;IAAA;IAmCA,CAAC;IAjCiB,eAAG,GAAjB;QAGI,IAAM,OAAO,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAA;QAEhD,GAAG;aACE,MAAM,CAAC,oCAAoC,EAAE,aAAa,CAAC;aAC3D,MAAM,CAAC,aAAa,EAAE,0BAA0B,CAAC;aACjD,KAAK,CAAC,uBAAuB,CAAC;aAC9B,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;aACxB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAExB,IAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAA;QAC1D,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,qBAAqB,CAAC,CAAA;QACjF,IAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAA;QAE3B,OAAO,CAAC,GAAG,CAAC,uBAAqB,OAAO,CAAC,OAAO,aAAO,OAAO,GAAG,OAAO,GAAG,SAAS,WAAO,CAAC,CAAA;QAC5F,OAAO,CAAC,GAAG,CAAC,uBAAqB,SAAS,QAAK,CAAC,CAAA;QAEhD,IAAM,UAAU,GAAG,IAAI,uBAAU,CAAC;YAC9B,IAAI,iCAAe,CAAC,SAAS,CAAC;SACjC,EAAE,OAAO,CAAC,CAAA;QAEX,IAAM,WAAW,GAAG,UAAU,CAAC,GAAG,EAAE,CAAA;QACpC,IAAM,MAAM,GAAG,WAAW,CAAC,WAAW,EAAE,GAAG,QAAQ,GAAG,QAAQ,CAAA;QAE9D,OAAO,CAAC,GAAG,CAAC,sBAAoB,MAAM,MAAG,CAAC,CAAA;QAE1C,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;QAC7B,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAA;QAEpD,OAAO,CAAC,GAAG,CAAC,qBAAmB,UAAU,MAAG,CAAC,CAAA;IACjD,CAAC;IACL,kBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,kCAAW","sourcesContent":["import cli  = require('commander')\nimport fs = require('fs-extra')\nimport path = require('path')\nimport {ParserTestSuite} from '../context/testing/parser/ParserTestSuite'\nimport {TestRunner} from '../context/testing/TestRunner'\n\nexport class Application {\n\n    public static run() {\n\n        // package.json path relative to compiled Application.js file\n        const project = require('../../../package.json')\n\n        cli\n            .option('-o, --output <ramlunit-report.xml>', 'output path')\n            .option('-d, --debug', 'enable very verbose mode')\n            .usage('[options] <main.raml>')\n            .version(project.version)\n            .parse(process.argv)\n\n        const inputPath = path.resolve(cli.args[0] || 'main.raml')\n        const outputPath = path.resolve(cli.optionFor('output') || 'ramlunit-report.xml')\n        const verbose = !!cli.debug\n\n        console.log(`Running RamlUnit v${project.version} in ${verbose ? 'debug' : 'regular'} mode`)\n        console.log(`Reading RAML from ${inputPath}...`)\n\n        const testRunner = new TestRunner([\n            new ParserTestSuite(inputPath),\n        ], verbose)\n\n        const xmlDocument = testRunner.run()\n        const status = xmlDocument.hasFailures() ? 'Failed' : 'Passed'\n\n        console.log(`Analysis result: ${status}.`)\n\n        fs.ensureFileSync(outputPath)\n        fs.writeFileSync(outputPath, xmlDocument.toString())\n\n        console.log(`Report saved to ${outputPath}.`)\n    }\n}\n"]}