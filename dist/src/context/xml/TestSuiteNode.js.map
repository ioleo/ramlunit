{"version":3,"file":"TestSuiteNode.js","sourceRoot":"","sources":["../../../../src/context/xml/TestSuiteNode.ts"],"names":[],"mappings":";;AAIA;IAMI,uBAAY,IAAY,EAAE,IAAU,EAAE,SAA8B;QAA9B,0BAAA,EAAA,cAA8B;QAChE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;IAC9B,CAAC;IAED,mCAAW,GAAX,UAAY,QAAsB;QAC9B,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA;IACnF,CAAC;IAED,qCAAa,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,QAAgB,EAAE,QAAsB;YAClE,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAA;QAC9C,CAAC,EAAE,CAAC,CAAC,CAAA;IACT,CAAC;IAED,mCAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAA;IACnC,CAAC;IAED,8BAAM,GAAN;QACI,IAAM,SAAS,GAAe,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,MAAM,EAAE,EAAX,CAAW,CAAC,CAAA;QAEnE,MAAM,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,EAAE,CAAA;IAC5E,CAAC;IAEO,4BAAI,GAAZ;QACI,MAAM,CAAC;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC1B,QAAQ,EAAE,IAAI,CAAC,aAAa,EAAE;SACjC,CAAA;IACL,CAAC;IACL,oBAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,sCAAa","sourcesContent":["import {TestCaseNode} from './TestCaseNode'\nimport {Time} from \"../time/Time\";\n\nexport type TestSuiteNodeAttr = { name: string, time: string, failures: number }\nexport class TestSuiteNode {\n\n    private name: string\n    private time: Time\n    private testcases: TestCaseNode[]\n\n    constructor(name: string, time: Time, testcases: TestCaseNode[] = []) {\n        this.name = name\n        this.time = time\n        this.testcases = testcases\n    }\n\n    addTestCase(testcase: TestCaseNode): TestSuiteNode {\n        return new TestSuiteNode(this.name, this.time, this.testcases.concat(testcase))\n    }\n\n    countFailures(): number {\n        return this.testcases.reduce((failures: number, testcase: TestCaseNode) => {\n            return failures + testcase.countFailures()\n        }, 0)\n    }\n\n    hasFailures(): boolean {\n        return this.countFailures() > 0\n    }\n\n    toJson(): Object {\n        const testcases: Array<any> = this.testcases.map(tc => tc.toJson())\n\n        return { testsuite: [{ _attr: this.attr() }, { testcases: testcases }] }\n    }\n\n    private attr(): TestSuiteNodeAttr {\n        return {\n            name: this.name,\n            time: this.time.toString(),\n            failures: this.countFailures()\n        }\n    }\n}\n"]}