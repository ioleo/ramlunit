{"version":3,"file":"ParserObject.js","sourceRoot":"","sources":["../../../../../src/context/testing/parser/ParserObject.ts"],"names":[],"mappings":";;AAAA,oCAAqC;AAErC,qDAAiD;AACjD,wCAAoC;AACpC,uDAAmD;AAGnD;IAAA;IA0BA,CAAC;IAxBU,kBAAK,GAAZ,UAAa,SAAiB;QAC1B,IAAM,SAAS,GAAG,IAAI,WAAI,EAAE,CAAA;QAC5B,IAAM,GAAG,GAAS,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;QAC7C,IAAM,OAAO,GAAK,IAAI,WAAI,CAAC,SAAS,CAAC,CAAA;QAErC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IACzB,CAAC;IAEM,2BAAc,GAArB,UAAsB,IAAY,EAAE,WAAwB;QACxD,IAAM,MAAM,GAAsB,CAAC,IAAI,IAAI,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;QAEhF,MAAM,CAAC,IAAI,2BAAY,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAA;IACzE,CAAC;IAEM,0BAAa,GAApB,UAAqB,KAAsB;QACvC,IAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAA;QAC5B,IAAM,OAAO,GAAG,aAChB,KAAK,CAAC,IAAI,gBACV,EAAE,CAAC,IAAI,kBACL,EAAE,CAAC,MAAM,eACV,CAAA;QAED,MAAM,CAAC,IAAI,yBAAW,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;IAC9D,CAAC;IACL,mBAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,oCAAY","sourcesContent":["import * as raml from 'raml-1-parser'\nimport {ErrorGroups, RamlApi} from \"./ParserTypes\"\nimport {FailureNode} from \"../../xml/FailureNode\"\nimport {Time} from '../../time/Time'\nimport {TestCaseNode} from '../../xml/TestCaseNode'\nimport {RamlParserError} from 'raml-1-parser/dist/raml1/highLevelAST'\n\nexport class ParserObject {\n\n    static parse(inputPath: string): [RamlApi, Time] {\n        const stopwatch = new Time()\n        const api       = raml.loadApiSync(inputPath)\n        const elapsed   = new Time(stopwatch)\n\n        return [api, elapsed]\n    }\n\n    static createTestCase(name: string, errorGroups: ErrorGroups): TestCaseNode {\n        const errors: RamlParserError[] = (name in errorGroups) ? errorGroups[name] : []\n\n        return new TestCaseNode(name, errors.map(ParserObject.createFailure))\n    }\n\n    static createFailure(error: RamlParserError): FailureNode {\n        const at = error.range.start\n        const context = `\nFile: ${error.path}\nLine: ${at.line}\nColumn: ${at.column}\n\\t\\t\\t\\t`\n\n        return new FailureNode(error.message, error.code, context)\n    }\n}"]}